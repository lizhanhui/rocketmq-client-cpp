syntax = "proto3";

import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";

package apache.rocketmq.v1;

option java_multiple_files = true;
option java_package = "apache.rocketmq.v1";
option java_generate_equals_and_hash = true;
option java_string_check_utf8 = true;

// Ali Cloud Service
option java_outer_classname = "MQDomain";

enum Permission {
    NONE = 0;
    READ = 1;
    WRITE = 2;
    READ_WRITE = 3;
}

enum FilterType {
    TAG = 0;
    SQL = 1;
}

message FilterExpression {
    FilterType type = 1;
    string expression = 2;
}

// Dead lettering is done on a best effort basis. The same message might be
// dead lettered multiple times.
//
// If validation on any of the fields fails at subscription creation/update,
// the create/update subscription request will fail.
message DeadLetterPolicy {
    // The maximum number of delivery attempts for any message. The value must be
    // between 5 and 100.
    //
    // This field will be honored on a best effort basis.
    //
    // If this parameter is 0, a default value of 5 is used.
    int32 max_delivery_attempts = 1;
}

message Resource {
    // Abstract resource namespace
    string arn = 1;

    // Resource name identifier, which remains unique within the abstract resource namespace.
    string name = 2;
}

enum ConsumeModel {
    CLUSTERING = 0;
    BROADCASTING = 1;
}

message ProducerGroup {
    Resource group = 1;
}

enum ConsumePolicy {
    RESUME = 0;
    PLAYBACK = 1;
    DISCARD = 2;
    TARGET_TIMESTAMP = 3;
}

message ConsumerGroup {
    Resource group = 1;

    repeated SubscriptionEntry subscriptions = 2;

    ConsumeModel consume_model = 3;

    ConsumePolicy consume_policy = 4;

    DeadLetterPolicy dead_letter_policy = 5;

    ConsumeMessageType consume_type = 6;
}

message SubscriptionEntry {
    Resource topic = 1;
    FilterExpression expression = 2;
}

message HeartbeatEntry {
    string client_id = 1;
    oneof client_data {
        ProducerGroup producer_group = 2;
        ConsumerGroup consumer_group = 3;
    }
    bool need_rebalance = 4;
}

enum AddressScheme {
    IPv4 = 0;
    IPv6 = 1;
    DOMAIN_NAME = 2;
}

message Address {
    string host = 1;
    int32 port = 2;
}

message Endpoints {
    AddressScheme scheme = 1;
    repeated Address addresses = 2;
}

message Broker {
    // Name of the broker
    string name = 1;

    // Broker index. Canonically, index = 0 implies that the broker is playing leader role while brokers with index > 0
    // play follower role.
    int32 id = 2;

    // Address of the broker, complying with the following scheme
    // 1. dns:[//authority/]host[:port]
    // 2. ipv4:address[:port][,address[:port],...] – IPv4 addresses
    // 3. ipv6:address[:port][,address[:port],...] – IPv6 addresses
    Endpoints endpoints = 3;
}

message Partition {
    Resource topic = 1;
    int32  id = 2;
    Permission permission = 3;
    Broker broker = 4;
}

// Language of the client
enum Language {
    JAVA = 0;
    CPP = 1;
    C_SHARP = 2;
    PYTHON = 3;
    DELPHI = 4;
    ERLANG = 5;
    RUBY = 6;
    GO = 7;
    PHP = 8;
    RUST = 9;
    C = 10;
    PERL = 11;
    OBJECTIVE_C = 12;
    DART = 13;
    KOTLIN = 14;
    NODE_JS = 15;
}

enum MessageType {
    NORMAL = 0;

    // Sequenced message
    FIFO = 1;

    // Messages that are delivered after the specified duration.
    DELAY = 2;

    // Messages that are transactional. Only committed messages are delivered to subscribers.
    TRANSACTION = 3;
}

enum DigestType {
    // CRC algorithm achieves goal of detecting random data error with lowest computation overhead.
    CRC32 = 0;

    // MD5 algorithm achieves good balance between collision rate and computation overhead.
    MD5 = 1;

    // SHA-family has substantially fewer collision with fair amount of computation.
    SHA1 = 2;
}

message Digest {
    DigestType type = 1;
    string checksum = 2;
}

enum Encoding {
    IDENTITY = 0;
    GZIP = 1;
    SNAPPY = 2;
}

message SystemAttribute {
    // Tag
    string tag = 1;

    // Message keys
    repeated string keys = 2;

    // Message identifier, client-side generated, remains unique.
    string message_id = 3;

    // Message body digest
    Digest body_digest = 4;

    // Message body encoding. Candidate options are identity, gzip, snappy etc.
    Encoding body_encoding = 5;

    // Message type, normal, FIFO or transactional.
    MessageType message_type = 6;

    // Message born time-point.
    google.protobuf.Timestamp born_timestamp = 7;

    // Message born host. Valid options are IPv4, IPv6 or client host domain name.
    string born_host = 8;

    // Time-point at which the message is stored in the broker.
    google.protobuf.Timestamp store_timestamp = 9;

    // The broker that stores this message. It may be name, IP or arbitrary identifier that uniquely identify the broker.
    string store_host = 10;

    oneof timed_delivery {
        // Time-point at which broker delivers to clients.
        google.protobuf.Timestamp delivery_timestamp = 11;

        // Level-based delay strategy.
        int32 delay_level = 12;
    }

    // If a message is acquired by way of POP, this field holds the receipt. Clients use the receipt to
    // acknowledge or negatively acknowledge the message.
    string receipt_handle = 13;

    // Partition identifier in which a message is physically stored.
    int32 partition_id = 14;

    // Partition offset at which a message is stored.
    int64 partition_offset = 15;

    // Period of time servers would remain invisible once a message is acquired.
    google.protobuf.Duration invisible_period = 16;

    // Business code may failed to process messages for the moment. Hence, clients may request servers to deliver them
    // again using certain back-off strategy.
    int32 delivery_count = 17;

    // Message's max delivery count, if message's delivery count exceed this value, it will be sent to dlq topic.
    int32 max_delivery_count = 18;

    // Message producer load-balance group if applicable.
    Resource producer_group = 19;

    string message_group = 20;

    // Trace context.
    string trace_context = 21;

    // Correlated transaction
    string transaction_id = 22;
}

message Message {
    Resource topic = 1;
    // User defined key-value pairs.
    map<string, string> user_attribute = 2;
    SystemAttribute system_attribute = 3;
    bytes body = 4;
}

enum ConsumeMessageType {
    // Partition-based pull. Client is responsible to first seek to a position in the partition and then
    // initiate a sequence of pull request to fetch messages within given range.
    PULL = 0;

    // Offsets are implicitly managed by brokers. Clients generally perform stateless pop requests from
    // logical queues pertaining to the specified topic.
    POP = 1;
}

message Assignment {
    Partition Partition = 1;
    ConsumeMessageType mode = 2;
}

enum QueryOffsetPolicy {
    // Use this option if client wishes to playback all existing messages.
    BEGINNING = 0;

    // Use this option if client wishes to skip all existing messages.
    END = 1;

    // Use this option if time-based seek is targeted.
    TIME_POINT = 2;
}